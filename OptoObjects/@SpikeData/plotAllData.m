function varargout = plotAllData(obj, channel, unit, varargin)
%------------------------------------------------------------------------
% [plot handles] = SpikeData.plotAllDataUnitWaveforms(channel, unit, psthBinWidth)
%------------------------------------------------------------------------
% Plots: Data, waveforms, etc for selected channel and unit
%------------------------------------------------------------------------


%------------------------------------------------------------------------
%  Sharad Shanbhag
%   sshanbhag@neomed.edu
%------------------------------------------------------------------------
% Created: 7 July, 2020 (SJS)
%	 
% Revisions:
% 
%------------------------------------------------------------------------
% TO DO:
%	Add save

if ~isempty(varargin)
	psthBin = varargin{1};
else
	psthBin = 5;
end

%{
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% define paths and data files  FOR TESTING
%------------------------------------------------------------------------
%------------------------------------------------------------------------
% data locations - adjust this for your setup
%------------------------------------------------------------------------

% location of .plx file (from Plexon OfflineSorter)
plxFilePath = '/Users/sshanbhag/Work/Data/TestData/working';
% location of _nexInfo.mat file (generated by export_for_plexon)
nexInfoPath = plxFilePath;

% sorted data file name
plxFile = '1407_20200309_03_01_1350_MERGEEVENTS2.plx';
% nexinfo file
nexInfoFile = '1407_20200309_03_01_1350_MERGEEVENTS2_nexinfo.mat';

sendmsg(sprintf('Using data from file: %s', plxFile));

obj= import_from_plexon(fullfile(plxFilePath, plxFile), ...
							fullfile(nexInfoPath, nexInfoFile), 'nocontinuous');
%}

%------------------------------------------------------------------------
% get list of tests
%------------------------------------------------------------------------
testList = cell(obj.Info.nFiles, 1);
for f = 1:obj.Info.nFiles
	testList{f} = obj.Info.FileInfo{f}.testname;
end

%------------------------------------------------------------------------
% loop through tests
%------------------------------------------------------------------------
for findx = 1:obj.Info.nFiles
	sendmsg(sprintf('Plotting data for %s', ...
							obj.Info.FileInfo{findx}.F.file));
						
	%----------------------------------------------
	% get spikes for this file
	%----------------------------------------------
	S = obj.getSpikesByStim(findx, channel, unit);
	% make a local copy of Dinf for this file to make things a little simpler
	Dinf = obj.Info.FileInfo{findx}.Dinf;

	%----------------------------------------------
	% plot waveforms
	%----------------------------------------------
	% (1) vertically concatenate data stored in cell array of sweeps in
	% st.spiketable into a single table
	tmpT = vertcat(S.spiketable{:});
	% (2) extract just the wave field 
	tmpwav = tmpT.Wave;
	% (3) plot overlaid waveforms
	% plot in new figure
	% need time vector for x-axis
	[~, nBins] = size(tmpwav);
	t_ms = (1000/obj.Info.Fs) * (0:(nBins - 1));
	% plot waveforms, with mean and legend
	% need tmpwav to be in column format - time in rows, indv. units by column
	% so send the function the transpose of the tmpwav matrix.
	hWF = plot_spike_waveforms(t_ms, tmpwav', 'MEAN', true, 'LEGEND', true);
	% add title to plot
	% create title string with 2 rows:
	%	filename (either from S struct or S.Info.FileInfo{findx}.F.file
	%	channel and unit
	tstr = {	S.fileName, sprintf('Channel %d Unit %d', channel, unit)};
	title(tstr, 'Interpreter', 'none');
	% set figure filename - use the base from the FreqTuningInfo.F object
	set(gcf, 'Name', sprintf('%s_Snips_Ch%d_Un%d', ...
					obj.Info.FileInfo{findx}.F.base, S.channel, S.unit));

	% save file
	% xxxxxxxx
	fprintf('Creating data plot for %s\n', ...
						obj.Info.FileInfo{findx}.testname);
					
	%----------------------------------------------
	% plot data according to test
	%----------------------------------------------
	switch upper(obj.Info.FileInfo{findx}.testname)
		case {'BBN', 'LEVEL'}
			% set analysis window to [stimulus onset   stimulus offset]
			analysisWindow = Dinf.audio.Delay + [0 Dinf.audio.Duration];
			% compute rate level function
			RLF = computeRLF(S.spiketimes, S.unique_stim, analysisWindow);
			% plot
			hRLF = plotCurveAndCI(RLF, 'mean');
			% create title string with 2 rows:
			%	filename
			%	channel and unit
			tstr = {	S.fileName, ...
						sprintf('Channel %d Unit %d', channel, unit)};
			% add title to plot
			title(tstr, 'Interpreter', 'none');
			% set filename - use the base from the FreqTuningInfo.F object
			set(hRLF, 'Name', sprintf('%s_Ch%d_Un%d', ...
							obj.Info.FileInfo{findx}.F.base, S.channel, S.unit));
			
		case 'FREQ_TUNING'
			% set analysis window to [stimulus onset   stimulus offset]
			analysisWindow = Dinf.audio.Delay + [0 Dinf.audio.Duration];
			% compute rate level function
			FTC = computeFTC(S.spiketimes, S.unique_stim, analysisWindow);
			% plot
			hFTC = plotCurveAndCI(FTC, 'median');
			% create title string with 2 rows:
			%	filename
			%	channel and unit
			tstr = {	S.fileName, ...
						sprintf('Channel %d Unit %d', channel, unit)};
			% add title to plot
			title(tstr, 'Interpreter', 'none');
			% set filename - use the base from the FreqTuningInfo.F object
			set(hFTC, 'Name', ...
							sprintf('%s_Ch%d_Un%d', ...
												obj.Info.FileInfo{findx}.F.base, ...
												S.channel, S.unit));
		
		case 'WAV'
			% plotPSTH is a method in the WAVInfo class, stored at the findx
			% element within the FileInfo cell array. 'LEVEL' tells the method
			% to separate plots according to stimulust level
			hWAV = obj.Info.FileInfo{findx}.plotPSTH(S, psthBin, ...
																	'LEVEL');

			% rename plots with filename, level, channel and unit
			for h = 1:length(hWAV)
				% build on original plot name, since this has the level
				% information already in it
				origname = get(hWAV{h}, 'Name');
				set(hWAV{h}, 'Name', ...
						sprintf('%s_Ch%d_Un%d', origname, S.channel, S.unit));
			end			
		case 'FRA'
			% window for spike count
			frawin = Dinf.audio.Delay + [0  Dinf.audio.Duration];
			% calculate FRA stored in struct FRA
			FRA = computeFRA(S.spiketimes, S.unique_stim{1}, ...
														S.unique_stim{2}, frawin);
			% set fname in FRA struct to data file name
			FRA.fname = S.fileName;
			hFRA = plotFRA(FRA, 'dB');	
			% set filename - use the base from the FreqTuningInfo.F object
			set(hFRA, 'Name', sprintf('%s_Ch%d_Un%d', ...
							obj.Info.FileInfo{findx}.F.base, S.channel, S.unit));
		otherwise
			error('plotAllData: unknown test name %s', ...
									obj.Info.FileInfo{f}.testname)
	end
	drawnow
	
	% save plot(s)
	% xxxxxxx
end

%------------------------------------------------------------------------
% eventually need to add all handles to this output
%------------------------------------------------------------------------
if nargout
	varargout{1} = hWF;
end