%------------------------------------------------------------------------
% plotAll_demo.m
%------------------------------------------------------------------------
% TytoLogy:optosort
%--------------------------------------------------------------------------
% example script for generating plots of data
%		
%------------------------------------------------------------------------
% See Also: optoproc, opto (TytoLogy:opto program)
%------------------------------------------------------------------------

%------------------------------------------------------------------------
%  Sharad Shanbhag
%   sshanbhag@neomed.edu
%------------------------------------------------------------------------
% Created: 7 July 2020 (SJS)
%	 
% Revisions:
%
%------------------------------------------------------------------------

%------------------------------------------------------------------------
%% add path to readPLXFileC if needed
%------------------------------------------------------------------------
% readPLXFileC is a function downloaded from MATLAB Central that allows
% direct reading of PLX file data in Matlab
if ~exist('readPLXFileC', 'file')
	fprintf('plot_curve_demo: adding readPLXFile to path\n');
	try
		addpath('readPLXFileC');
	catch
		error('Cannot find readPLXFileC function. Please add to path!')
	end
end

%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% define paths and data files
%------------------------------------------------------------------------
%------------------------------------------------------------------------
% data locations - adjust this for your setup
%------------------------------------------------------------------------

% location of .plx file (from Plexon OfflineSorter)
plxFilePath = '/Users/sshanbhag/Work/Data/TestData/working';
% location of _nexInfo.mat file (generated by export_for_plexon)
nexInfoPath = plxFilePath;

% sorted data file name
plxFile = '1407_20200309_03_01_1350_MERGEEVENTS2.plx';
% nexinfo file
nexInfoFile = '1407_20200309_03_01_1350_MERGEEVENTS2_nexinfo.mat';

sendmsg(sprintf('Using data from file: %s', plxFile));

%------------------------------------------------------------------------
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% load sorted data
%------------------------------------------------------------------------
% How to use:
% import_from_plexon(<plx file name>, <nexinfo file name>, 
%								<'continuous'/'nocontinuous'>)
%
%	will return a SpikeData object containing data from plx file:
% 	- spike times/unit information if sorted
% 	- continuous data, if saved in plx and 'continuous' is 
%		specified (default)
% 	- file stimulus info
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% there are two options here - if you feel that you'll want to look at the
% continuous data (recordings from electroeds), you can specify the
% 'continuous' option to load them.  otherwise, say "nocontinuous' to save
% time and memory
%------------------------------------------------------------------------
S = import_from_plexon(fullfile(plxFilePath, plxFile), ...
							fullfile(nexInfoPath, nexInfoFile), 'nocontinuous');
						
%------------------------------------------------------------------------
%% show file, channel, unit
%------------------------------------------------------------------------
% display file, channel, unit info, store information about files, channels
% and units
[fileList, channelList, unitList] = S.printInfo;

%{
----------------------------------------------------
Data in file /Users/sshanbhag/Work/Data/TestData/working/1407_20200309_03_01_1350_MERGEEVENTS.nex
----------------------------------------------------
----------------------------------------------------
Has continuous data: No
----------------------------------------------------
----------------------------------------------------
Input Data Files:\n
----------------------------------------------------
	Index		Filename
	1:		1407_20200309_03_01_1350_BBN.dat
	2:		1407_20200309_03_01_1350_FREQ_TUNING.dat
	3:		1407_20200309_03_01_1350_WAV.dat
	4:		1407_20200309_03_01_1350_FRA.dat
----------------------------------------------------
Channels and Unit ID #s:\n
----------------------------------------------------
	Index	Channel	Units
	1:	4	0 1 2 3 4 
	2:	5	0 1 2 3 4 
	3:	7	0 1 
	4:	15	0 1 2 
%}

%------------------------------------------------------------------------
%% define channel, unit, psth bin width (milliseconds)
%------------------------------------------------------------------------
channel = 4;
unit = 3;
psthBinWidth = 5;

%------------------------------------------------------------------------
%% plot it and save png files
%------------------------------------------------------------------------
% create output directory: 
outputpath = fullfile( plxFilePath, ...
					        S.Info.FileInfo{1}.F.animal, ...
					        S.Info.FileInfo{1}.F.datecode ...
							  );
S.plotAllData(channel, unit, ...
					'saveplots', 'plotpath', outputpath, ...
					'saveformat', 'png')

% S.plotAllData(channel, unit, psthBinWidth);
