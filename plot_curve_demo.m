%------------------------------------------------------------------------
% plot_curve_demo.m
%------------------------------------------------------------------------
% TytoLogy:optosort
%--------------------------------------------------------------------------
% example script for generating plots of data
%	plots shown:
%		
%------------------------------------------------------------------------
% See Also: optoproc, opto (TytoLogy:opto program)
%------------------------------------------------------------------------

%------------------------------------------------------------------------
%  Sharad Shanbhag
%   sshanbhag@neomed.edu
%------------------------------------------------------------------------
% Created: 25 June 2020 (SJS)
%	 
% Revisions:
%
%------------------------------------------------------------------------

%------------------------------------------------------------------------
%% add path to readPLXFileC if needed
%------------------------------------------------------------------------
% readPLXFileC is a function downloaded from MATLAB Central that allows
% direct reading of PLX file data in Matlab
if ~exist('readPLXFileC', 'file')
	fprintf('plot_curve_demo: adding readPLXFile to path\n');
	addpath('readPLXFileC');
end

%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% define paths and data files
%------------------------------------------------------------------------
%------------------------------------------------------------------------
% data locations - adjust this for your setup

% location of .plx file (from Plexon OfflineSorter)
plxFilePath = '/Users/sshanbhag/Work/Data/TestData/working';
% location of _nexInfo.mat file (generated by export_for_plexon)
nexInfoPath = plxFilePath;

% sorted data file name
plxFile = '1407_20200309_03_01_1350_MERGEEVENTS2.plx';
% nexinfo file
nexInfoFile = '1407_20200309_03_01_1350_MERGEEVENTS2_nexinfo.mat';

sendmsg(sprintf('Using data from file: %s', plxFile));
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% load sorted data
%------------------------------------------------------------------------
% How to use:
% import_from_plexon(<plx file name>, <nexinfo file name>, 
%								<'continuous'/'nocontinuous'>)
%
%	will return a SpikeData object containing data from plx file:
% 	- spike times/unit information if sorted
% 	- continuous data, if saved in plx and 'continuous' is 
%		specified (default)
% 	- file stimulus info
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% there are two options here - if you feel that you'll want to look at the
% continuous data (recordings from electroeds), you can specify the
% 'continuous' option to load them.  
%------------------------------------------------------------------------
S = import_from_plexon(fullfile(plxFilePath, plxFile), ...
							fullfile(nexInfoPath, nexInfoFile), 'continuous');
%------------------------------------------------------------------------
% or, specify 'nocontinuous' to tell import_from_plexon to ignore the
% continuous channel data. this should save on memory
% S = import_from_plexon(fullfile(plxFilePath, plxFile), ...
%------------------------------------------------------------------------
% 							fullfile(nexInfoPath, nexInfoFile), 'nocontinuous');

% The returned SpikeData object, S, contains:
%	Info
%		information about the experiment, stimuli, etc in the Info object
%	Spikes
%		results from spike sorting, stored as a MATLAB table object
% 		Typically, data in the Spikes table will be accessed through methods
%		that are part of the SpikeData class.
%	Continuous
%		
%	plxvar
%		holdover from attempted solution for missing A/D channel info
%		when exporting from Plexon OFS.
%	hasContinuousData
% 		1 if continuous data are loaded, 
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% information about file
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%------------------------------------------------------------------------
% show file, channel, unit
%------------------------------------------------------------------------
% display file, channel, unit info, store information about files, channels
% and units
[fileList, channelList, unitList] = S.printInfo;

%------------------------------------------------------------------------
% Show how to list files and curve types
%------------------------------------------------------------------------
% loop through the number of files merged into file to be sorted
sendmsg('File and test information:')
for f = 1:S.Info.nFiles
	% for each file number, display the test type and test name (i know why
	% two different things? an effect of an old kludge...)
	fprintf('File %d:\n', f);
	fprintf('\tTest Type: %s\n', S.Info.FileInfo{f}.testtype);
	fprintf('\tTest Name: %s\n', S.Info.FileInfo{f}.testname);
end

%{
alternative: use fileList
%}


%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% test, channel and unit to process and plot
%------------------------------------------------------------------------
%------------------------------------------------------------------------

%-------------------------------------------------------
% What test data do you want to plot?
% Options:
% testToPlot = 'FREQ_TUNING';
% testToPlot = 'FRA';
% testToPlot = 'BBN';
% testToPlot = 'WAV';
%-------------------------------------------------------
testToPlot = 'WAV';

% specify channel to plot
channel = 4;
% specify unit:
unit = 1;
% binsize (in milliseconds) for psth
psth_bin_size = 5;

%-------------------------------------------------------
% figure out file index for this test. the indexForTestName method of
% SpikeData class allows an easy way to do this.
%-------------------------------------------------------
findx = S.indexForTestName(testToPlot);
if isempty(findx)
	fprintf('Test %s not found in %s\n', testToPlot, plxFile);
	error('%s: bad testToPlot', mfilename);
end

%------------------------------------------------------------------------
% get spikes times struct (store in st) for this test, channel and unit
% spiketimes will be aligned to start of each sweep
%------------------------------------------------------------------------
fprintf('Getting data for file %d (%s), channel, %d unit %d\n', ...
								findx, S.listFiles{findx}, channel, unit);
st = S.getSpikesByStim(findx, channel, unit);
% st  struct with fields:
% st = 
%      spiketimes: {53×1 cell}
%       stimindex: {53×1 cell}
%         stimvar: {53×1 cell}
%     unique_stim: {53×1 cell}
%           nstim: 53
%      spiketable: {1060×1 cell}
%       fileIndex: 3
%         channel: 5
%            unit: 1
%        fileName: '1407_20200309_03_01_1350_WAV.dat'
		 
% make a local copy of Dinf for this file to make things a little simpler
Dinf = S.Info.FileInfo{findx}.Dinf;


%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% plot freq-tuning curves for non-zero units
%------------------------------------------------------------------------
%------------------------------------------------------------------------



%------------------------------------------------------------------------
%------------------------------------------------------------------------
%% for WAV data, plot PSTH and rasters
% use different plots/pages for each different stimulus level
%------------------------------------------------------------------------
%------------------------------------------------------------------------
if strcmpi(testToPlot, 'WAV')
	% plotPSTH is a method in the WAVInfo class, stored at the findx
	% element within the FileInfo cell array. 'LEVEL' tells the method to
	% separate plots according to stimulust level
	H = S.Info.FileInfo{findx}.plotPSTH(st, psth_bin_size, 'LEVEL');

	% rename plots with filename, level, channel and unit
	for h = 1:length(H)
		origname = get(H{h}, 'Name');
		set(H{h}, 'Name', ...
					sprintf('%s_Ch%d_Un%d', origname, st.channel, st.unit));
	end
end





